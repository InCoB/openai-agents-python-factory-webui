from typing import Dict, Any, Optional
import asyncio

from agents import Agent, Runner
from agents.model_settings import ModelSettings

from aigen.agents.base import AgentBase, AgentRole, AgentResponse
from aigen.core.context import Context
from aigen.core.errors import AgentError
from aigen.core.logging import get_logger

{% if config.output_type %}
from typing import List, Optional, Union, Dict, Any
from pydantic import BaseModel
{% endif %}

# Import tools directly
{% for tool_name in config.tools %}
# Convert snake_case to module path
{% set module_name = tool_name.split('_')[0] %}
{% if tool_name == 'tavily_search' %}
from aigen.tools.research import tavily_search_tool
{% else %}
from aigen.tools.{{ module_name }} import {{ tool_name }}_tool
{% endif %}
{% endfor %}

logger = get_logger("{{ config.agent_type }}_agent")

{% if config.output_type %}
{{ config.output_type }}
{% endif %}

class {{ config.name | replace(" ", "") }}Agent(AgentBase):
    """
    {{ config.name }} - {{ config.role }} agent.
    
    This agent is automatically generated by the agent builder.
    
    {{ config.instructions | truncate(200) }}
    """
    
    def __init__(
        self, 
        agent_id: str = "{{ config.agent_type }}",
        **kwargs
    ) -> None:
        """
        Initialize the agent.
        
        Args:
            agent_id: Unique identifier for this agent instance.
            **kwargs: Additional arguments to pass to the agent.
        """
        super().__init__(agent_id=agent_id, role=AgentRole.{{ framework_role.upper() }}, **kwargs)
        
        # Support initialization via 'instructions' parameter
        if not self.instructions:
            self.instructions = """{{ config.instructions }}"""
        
        # Initialize tools with direct imports
        {% for tool_name in config.tools %}
        try:
            {% if tool_name == 'tavily_search' %}
            self.add_tool(tavily_search_tool)
            {% else %}
            self.add_tool({{ tool_name }}_tool)
            {% endif %}
        except Exception as e:
            logger.warning(f"Failed to initialize tool {{ tool_name }}: {str(e)}")
        {% endfor %}

    async def initialize(self) -> None:
        """Initialize the OpenAI agent."""
        if self.is_initialized():
            return

        try:
            self.openai_agent = Agent(
                name=f"{{ config.name }} ({self.agent_id})",
                instructions=self.instructions,
                tools=self.tools,
                model=self.parameters.get("model", "{{ config.model }}"),
                model_settings=ModelSettings(
                    temperature=self.parameters.get("temperature", {{ config.parameters.get("temperature", 0.7) }}),
                    {% if config.parameters.get("max_tokens") %}
                    max_tokens=self.parameters.get("max_tokens", {{ config.parameters.get("max_tokens") }}),
                    {% endif %}
                ),
                {% if config.output_type %}
                output_type={{ config.output_type.split("class ")[1].split("(")[0] if config.output_type else "None" }},
                {% endif %}
            )
            
            logger.info(f"Initialized {{ config.name.lower() }} agent {self.agent_id}")
            
        except Exception as e:
            logger.error(f"Failed to initialize agent {self.agent_id}: {str(e)}")
            raise AgentError(f"Agent initialization failed: {str(e)}", agent_id=self.agent_id)
    
    async def execute(
        self, 
        context: Context,
        input_text: Optional[str] = None
    ) -> AgentResponse:
        """
        Execute the agent with the given input.
        
        Args:
            context: Execution context
            input_text: Optional direct input text
            
        Returns:
            AgentResponse: The agent's response
        """
        try:
            # Initialize if not already done
            if not self.is_initialized():
                await self.initialize()
            
            # Get input - either direct or from context
            if input_text is None:
                input_text = context.get_latest_output() or "No input provided"

            logger.info(f"Executing {{ config.name.lower() }} agent {self.agent_id}")
            
            # Execute the OpenAI agent
            response = await Runner.run(
                self.openai_agent,
                input=input_text,
                context=None,  # Don't pass the Context object directly to Runner
                max_turns=self.parameters.get("max_turns", 10)
            )
            
            # Get output from final_output property of RunResult
            {% if config.output_type %}
            result = response.final_output
            {% else %}
            result = response.final_output if hasattr(response, 'final_output') else str(response)
            {% endif %}
            
            # Store result in context
            context.store_output(self.agent_id, result)
            
            return AgentResponse(
                content=result,
                agent_id=self.agent_id,
                success=True,
                metadata={"agent_type": "{{ config.agent_type }}", "role": "{{ framework_role }}"}
            )
            
        except Exception as e:
            error_msg = f"Error executing {{ config.name.lower() }} agent {self.agent_id}: {str(e)}"
            logger.error(error_msg)
            context.record_error(error_msg)
            return AgentResponse.error_response(self.agent_id, str(e)) 