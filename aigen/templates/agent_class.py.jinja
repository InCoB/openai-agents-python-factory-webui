from typing import Dict, Any, Optional, List, Tuple
import logging
from pydantic import BaseModel

from agents import Agent, Runner
from agents.model_settings import ModelSettings
{% if config.output_type %}
from typing import List, Optional, Union, Dict, Any
{% endif %}

# Set up logger
logger = logging.getLogger("{{ config.agent_type }}_agent")

{% if config.output_type %}
{{ config.output_type }}
{% endif %}

class {{ config.name | replace(" ", "") }}Agent:
    """
    {{ config.name }} - {{ config.role }} agent.
    
    This agent is automatically generated by the agent builder.
    
    {{ config.instructions | truncate(200) }}
    """
    
    def __init__(
        self, 
        agent_id: str = "{{ config.agent_type }}",
        **kwargs: Any
    ) -> None:
        """
        Initialize the agent.
        
        Args:
            agent_id: Unique identifier for this agent instance.
            **kwargs: Additional arguments to pass to the agent.
        """
        self.agent_id = agent_id
        self.role = "{{ framework_role }}"
        
        # Support initialization via 'instructions' parameter
        self.system_prompt = kwargs.get(
            "instructions", 
            """{{ config.instructions }}"""
        )
        
        # Track initialization state
        self._initialized = False
        self._openai_agent = None
        
        # Initialize tools and parameters
        self.tools = []
        self.parameters = {
            {% for key, value in config.parameters.items() %}
            "{{ key }}": {{ value }},
            {% endfor %}
            **kwargs
        }
        
        # Load tools
        self._init_tools()
    
    def _init_tools(self) -> None:
        """Initialize tools for this agent."""
        tool_names = {{ config.tools }}
        
        for tool_name in tool_names:
            try:
                # Use the tool factory to create tools
                from ..tools.factory import create_tool
                tool = create_tool(tool_name)
                self.tools.append(tool)
            except Exception as e:
                logger.warning(f"Failed to initialize tool {tool_name}: {str(e)}")
    
    def is_initialized(self) -> bool:
        """
        Check if the agent is initialized.
        
        Returns:
            True if the agent is initialized, False otherwise.
        """
        return self._initialized and self._openai_agent is not None
    
    async def initialize(self) -> None:
        """
        Initialize the OpenAI agent.
        
        This method sets up the OpenAI agent with the configured tools and parameters.
        """
        if self.is_initialized():
            return
            
        try:
            # Create the OpenAI agent
            model_settings = ModelSettings(
                temperature={{ config.parameters.get("temperature", 0.7) }},
                {% if config.parameters.get("max_tokens") %}
                max_tokens={{ config.parameters.get("max_tokens") }},
                {% endif %}
            )
            
            self._openai_agent = Agent(
                name=self.agent_id,
                instructions=self.system_prompt,
                tools=self.tools,
                # Model name
                model="{{ config.model }}",
                {% if config.output_type %}
                output_type={{ config.output_type.split("class ")[1].split("(")[0] if config.output_type else "None" }},
                {% endif %}
                # Model settings
                model_settings=model_settings
            )
            
            self._initialized = True
            logger.info(f"{{ config.name }} agent {self.agent_id} initialized")
            
        except Exception as e:
            logger.error(f"Failed to initialize agent {self.agent_id}: {str(e)}")
            raise RuntimeError(f"Agent initialization failed: {str(e)}")
    
    async def execute(
        self, 
        input_text: str,
        context: Optional[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """
        Execute the agent with the given input.
        
        Args:
            input_text: Input text to send to the agent.
            context: Optional context information.
            
        Returns:
            Response dictionary with content and metadata.
            
        Raises:
            RuntimeError: If the agent fails to execute.
        """
        try:
            # Initialize if not already done
            if not self.is_initialized():
                await self.initialize()
            
            # Execute using Runner.run() from OpenAI Agents SDK
            result = await Runner.run(
                self._openai_agent,
                input=input_text,
                max_turns=self.parameters.get("max_turns", 10)
            )
            
            # Extract the output
            {% if config.output_type %}
            output = result.final_output
            {% else %}
            # Get output from final_output property of RunResult
            if hasattr(result, 'final_output') and result.final_output:
                output = result.final_output
            else:
                output = str(result)
            {% endif %}
            
            # Prepare response
            response = {
                "content": output,
                "agent_id": self.agent_id,
                "success": True,
                "metadata": {
                    "agent_type": "{{ config.agent_type }}",
                    "role": "{{ framework_role }}"
                }
            }
            
            return response
            
        except Exception as e:
            error_msg = f"Error executing agent {self.agent_id}: {str(e)}"
            logger.error(error_msg)
            
            return {
                "content": f"Error: {str(e)}",
                "agent_id": self.agent_id,
                "success": False,
                "metadata": {
                    "agent_type": "{{ config.agent_type }}",
                    "error": str(e)
                }
            } 